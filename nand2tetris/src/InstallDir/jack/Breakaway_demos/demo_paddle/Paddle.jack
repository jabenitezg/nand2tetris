// Paddle.jack

/**
 * Implements a graphic Paddle. A graphic Paddle has a screen location
 * and a size. It also has methods for drawing, erasing, moving on the 
 * screen, and changing its size.
 */
class Paddle {

    // Location on a 2048x1024 screen
    field int x, y;

    // The size of the Paddle
    field int size;
    
    // The change in position of the Paddle
    field int delta_x, delta_y;
        
    /** Constructs a new Paddle with a given location and size. */
    constructor Paddle new(int Ax, int Ay, int Asize) {
        let x = Ax;
        let y = Ay;
        let size = Asize;
        let delta_x = 10;
        let delta_y = 15;

        do draw();

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the Paddle on the screen. */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x/4-12, y/4-3, x/4+12, y/4+3);
        return;
    }

    /** Erases the Paddle from the screen. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x/4-12, y/4-3, x/4+12, y/4+3);
        return;
    }
    
    /** Moves the Paddle on the screen. */
    method void movePaddle() {
        
        // 4*148=592; 4*363 = 1452      add or subtract 4 to account for integer-divide-by-4 when drawing and erasing
        if ( ((x + delta_x - (4*12)) < 596) | ((x + delta_x + (4*12)) > 1448) ){
            let delta_x = -delta_x;
        }
        
        // 4*2=8; 4*253 = 1012    
        if ( ((y + delta_y - (4*3)) < 12) | ((y + delta_y + (4*3)) > 1008) ){
            let delta_y = -delta_y;
        }
        
        do erase();
    
        let x = x + delta_x;
        let y = y + delta_y;

        do draw();
    
        return;
    }
}